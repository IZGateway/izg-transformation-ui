---
name: Test, Build and Publish to AWS DEV environment

on:
  push:
    branches:
      - 'release/**'
      - 'IGDD-2181_Update-APHL-ECR-location-and-image-name'
  pull_request:
    branches:
      - develop

env:
  GITHUB_REGISTRY_PREFIX: ghcr.io
  GITHUB_REGISTRY_NAME: izgateway
  IMAGE_NAME: ${{ github.repository }}
  BUILD_ID: ${{ github.run_number}}
  BRANCH: ${{ github.ref_name }}

jobs:
  generate-release-timestamp:
    name: Generate release timestamp
    runs-on: ubuntu-latest
    outputs:
      releaseDate: ${{ steps.exposeValue.outputs.releaseDate }}
    steps:
      - name: Get current date
        id: date
        run: echo "RELEASE_DATE=$(date +'%d%b%Y%H%M%S')" >> "$GITHUB_ENV"
      - name: Expose value
        id: exposeValue
        run: |
          echo "::set-output name=releaseDate::${{ env.RELEASE_DATE }}"

  code-quality-check:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.x'
      - name: Install Dependencies
        run: npm ci
      # - name: Run Jest Unit Tests
      #   run: npm run test
      - name: Lint
        run: npm run code-quality-check

  create-tag:
    name: Create tag
    runs-on: ubuntu-latest
    needs: [code-quality-check, generate-release-timestamp]
    steps:
      - name: Create tag
        uses: actions/github-script@v5
        with:
          script: |
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/tags/${{ needs.generate-release-timestamp.outputs.releaseDate }}',
              sha: context.sha
            })

  build-and-push-image-aws:
    name: Build and push image to dev aws
    runs-on: ubuntu-latest
    needs: [code-quality-check, generate-release-timestamp]
    permissions:
      contents: write
      packages: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: Login to the GitHub Container registry
        if: ${{ contains(github.ref, 'refs/heads/release/') }}
        id: login-ghcr
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.GITHUB_REGISTRY_PREFIX }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to the Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.GITHUB_REGISTRY_PREFIX }}/${{ env.GITHUB_REGISTRY_NAME }}/izg-transformation-ui,enable=${{ contains(github.ref, 'refs/heads/release/') }}
            ${{ steps.login-ecr.outputs.registry }}/izg-transformation-ui
          tags: |
            type=raw,value=${{ needs.generate-release-timestamp.outputs.releaseDate }}
            type=raw,value=release,enable=${{ contains(github.ref, 'refs/heads/release/') }}
            type=raw,value=snapshot,enable=${{ github.ref == 'refs/heads/main' }}
          flavor: |
            latest=true

      - name: Build and push Docker Xform Console image
        id: docker_build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: Dockerfile
          build-args: |
            BUILD_ID=${{ needs.generate-release-timestamp.outputs.releaseDate }}
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build-and-push-aphl:
    name: 'Push Image To APHL'
    runs-on: ubuntu-latest
    if: ${{ github.ref == 'refs/heads/IGDD-2181_Update-APHL-ECR-location-and-image-name' }}
    needs: [code-quality-check, generate-release-timestamp]
    permissions:
      contents: write
      packages: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Cache Next.js build
        uses: actions/cache@v3
        with:
          path: |
            .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/package-lock.json') }}-
            ${{ runner.os }}-nextjs-

      - name: "Get Application Version"
        run: |
          echo "Setting the release version"
          APPLICATION_VERSION=$(npm pkg get version | tr -d '"')
          echo APPLICATION_VERSION="${APPLICATION_VERSION}" >> $GITHUB_ENV

      - name: Configure AWS credentials (APHL)
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.APHL_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.APHL_AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR (APHL)
        id: login_ecr_aphl
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker Metadata (APHL)
        id: docker_meta_aphl
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ secrets.APHL_ECR_REGISTRY }}/${{ secrets.APHL_ECR_REPOSITORY }}
          tags: |
            type=raw,value=izgw-transf-ui-${{ env.APPLICATION_VERSION }}_${{github.run_number}}
          flavor: |
            latest=false

      - name: Build and push Docker Xform Console image
        id: docker_build_aphl
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: Dockerfile
          build-args: |
            BUILD_ID=${{ needs.generate-release-timestamp.outputs.releaseDate }}
          push: true
          tags: |
            ${{ steps.docker_meta_aphl.outputs.tags }}
          labels: ${{ steps.docker_meta_aphl.outputs.labels }}

  deploy-dev:
    name: Deploy to Dev AWS environment
    runs-on: ubuntu-latest
    needs: [build-and-push-image-aws]
    if: |
      github.ref == 'refs/heads/develop' || 
      (github.event_name == 'pull_request' && github.base_ref == 'develop')
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Deploy to Dev AWS
        env:
          AWS_REGIONS: ${{ vars.AWS_REGIONS }}
          ECS_DESIRED_COUNT: ${{ vars.ECS_DESIRED_COUNT }}
        run: |
          if [ -z "$AWS_REGIONS" ]; then
            echo "AWS_REGIONS not set, defaulting to us-east-1"
            AWS_REGIONS="us-east-1"
          fi
          
          if [ -z "$ECS_DESIRED_COUNT" ]; then
            echo "ECS_DESIRED_COUNT not set, defaulting to 1"
            ECS_DESIRED_COUNT="1"
          fi
          
          for region in $AWS_REGIONS; do
            echo "Update ECS services in $region (starting $ECS_DESIRED_COUNT containers)"
            aws ecs update-service --region $region --cluster xform-console-dev --service xform-console-dev --force-new-deployment --enable-execute-command --desired-count $ECS_DESIRED_COUNT | jq ".service.deployments[].id" &
          done
          
          wait
          
          for region in $AWS_REGIONS; do
            echo "Wait for ECS service stability in $region"
            aws ecs wait services-stable --region $region --cluster xform-console-dev --service xform-console-dev &
          done
          
          wait
