---
name: Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        type: string
        required: true
        description: 'Version to release'
      dry-run:
        type: boolean
        required: false
        description: 'Is this a dry run? If true, no PRs or Releases will be created and only the steps it would take to create this release are printed'
        default: false

env:
  GITHUB_REGISTRY_PREFIX: ghcr.io
  GITHUB_REGISTRY_NAME: izgateway
  IMAGE_NAME: ${{ github.repository }}
  BUILD_ID: ${{ github.run_number}}
  BRANCH: ${{ github.ref_name }}

jobs:
  generate-release-timestamp:
    name: Generate release timestamp
    runs-on: ubuntu-latest
    outputs:
      releaseDate: ${{ steps.exposeValue.outputs.releaseDate }}
    steps:
      - name: Get current date
        id: date
        run: echo "RELEASE_DATE=$(date +'%d%b%Y%H%M%S')" >> "$GITHUB_ENV"
      - name: Expose value
        id: exposeValue
        run: |
          echo "::set-output name=releaseDate::${{ env.RELEASE_DATE }}"

  code-quality-check:
    name: Test and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      - name: Install Dependencies
        run: npm ci --force
      # - name: Run Jest Unit Tests
      #   run: npm run test
      - name: Lint
        run: npm run code-quality-check

  release-workflow:
    name: Create branch release/${{inputs.version}}
    runs-on: ubuntu-latest
    needs: [code-quality-check]
    steps:
      - name: gitflow-workflow-action release workflows
        uses: hoangvvo/gitflow-workflow-action@0.3.7
        with:
          develop_branch: 'develop'
          main_branch: 'main'
          merge_back_from_main: false
          version: ${{ inputs.version }}
          dry_run: ${{inputs.dry-run}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  build-and-push-image-aws:
    name: Build and push image to dev aws and github io
    runs-on: ubuntu-latest
    needs: [code-quality-check, generate-release-timestamp, release-workflow]
    permissions:
      contents: write
      packages: write
      pull-requests: write
      repository-projects: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: release/${{inputs.version}}

      - name: Login to the GitHub Container registry
        id: login-ghcr
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.GITHUB_REGISTRY_PREFIX }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to the Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.GITHUB_REGISTRY_PREFIX }}/${{ env.GITHUB_REGISTRY_NAME }}/izg-transformation-ui
            ${{ steps.login-ecr.outputs.registry }}/izg-transformation-ui
          tags: |
            type=raw,value=${{ needs.generate-release-timestamp.outputs.releaseDate }}
            type=raw,value=release
          flavor: |
            latest=true

      - name: Build and push Docker Xform Console image
        id: docker_build
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: Dockerfile
          build-args: |
            BUILD_ID=${{ needs.generate-release-timestamp.outputs.releaseDate }}
          push: true
          tags: |
            ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
